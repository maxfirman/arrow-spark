[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\maxfi\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\maxfi\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 11.0.13)
[debug]       Load.loadUnit: plugins took 153.0398ms
[debug]       Load.loadUnit: defsScala took 0.3406ms
[debug] [Loading] Scanning directory C:\Users\maxfi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\maxfi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.9063 ms
[debug]           Load.resolveProject(global-plugins) took 62.8738ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\maxfi\.sbt\1.0\plugins, plugins: List(<none>))) took 114.3303ms
[debug] [Loading] Done in C:\Users\maxfi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 140.3706ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2812ms
[debug]     Load.loadUnit(file:/C:/Users/maxfi/.sbt/1.0/plugins/, ...) took 304.0304ms
[debug]   Load.apply: load took 537.6718ms
[debug]   Load.apply: resolveProjects took 6.8164ms
[debug]   Load.apply: finalTransforms took 72.9949ms
[debug]   Load.apply: config.delegates took 9.648ms
[debug]   Load.apply: Def.make(settings)... took 489.2381ms
[debug]   Load.apply: structureIndex took 100.6134ms
[debug]   Load.apply: mkStreams took 1.6899ms
[info] loading global plugins from C:\Users\maxfi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2789.0423ms
[debug]           Load.loadUnit: plugins took 37.8312ms
[debug]           Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\maxfi\IdeaProjects\arrow-spark\project
[debug]             Load.loadUnit: mkEval took 11.9126ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\maxfi\IdeaProjects\arrow-spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6365 ms
[info] loading settings for project arrow-spark-build from idea.sbt ...
[debug]               Load.resolveProject(arrow-spark-build) took 3.7559ms
[debug]             Load.loadTransitive: finalizeProject(Project(id arrow-spark-build, base: C:\Users\maxfi\IdeaProjects\arrow-spark\project, plugins: List(<none>))) took 7.2321ms
[debug] [Loading] Done in C:\Users\maxfi\IdeaProjects\arrow-spark\project, returning: (arrow-spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2993.9767ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.3649ms
[debug]         Load.loadUnit(file:/C:/Users/maxfi/IdeaProjects/arrow-spark/project/, ...) took 3040.625ms
[debug]       Load.apply: load took 3043.1177ms
[debug]       Load.apply: resolveProjects took 0.1673ms
[debug]       Load.apply: finalTransforms took 14.3096ms
[debug]       Load.apply: config.delegates took 0.438ms
[debug]       Load.apply: Def.make(settings)... took 89.6149ms
[debug]       Load.apply: structureIndex took 41.9831ms
[debug]       Load.apply: mkStreams took 0.002ms
[info] loading project definition from C:\Users\maxfi\IdeaProjects\arrow-spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4829.2243ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\maxfi\IdeaProjects\arrow-spark
[debug]       Load.loadUnit: mkEval took 0.2772ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\maxfi\IdeaProjects\arrow-spark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6833 ms
[info] loading settings for project arrow-spark from build.sbt ...
[debug]         Load.resolveProject(arrow-spark) took 35.3152ms
[debug]       Load.loadTransitive: finalizeProject(Project(id arrow-spark, base: C:\Users\maxfi\IdeaProjects\arrow-spark, plugins: List(<none>))) took 39.4074ms
[debug] [Loading] Done in C:\Users\maxfi\IdeaProjects\arrow-spark, returning: (arrow-spark)
[debug]     Load.loadUnit: loadedProjectsRaw took 1455.5876ms
[debug]     Load.loadUnit: cleanEvalClasses took 18.7611ms
[debug]   Load.loadUnit(file:/C:/Users/maxfi/IdeaProjects/arrow-spark/, ...) took 6304.2756ms
[debug] Load.apply: load took 6307.056ms
[debug] Load.apply: resolveProjects took 0.1563ms
[debug] Load.apply: finalTransforms took 36.552ms
[debug] Load.apply: config.delegates took 0.7783ms
[debug] Load.apply: Def.make(settings)... took 95.7573ms
[debug] Load.apply: structureIndex took 31.8731ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to arrow-spark (in build file:/C:/Users/maxfi/IdeaProjects/arrow-spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56177 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56177, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to arrow-spark (in build file:/C:/Users/maxfi/IdeaProjects/arrow-spark/)
[debug] > Exec(idea-shell, None, None)
